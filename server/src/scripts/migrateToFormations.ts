// server/src/scripts/migrateToFormations.ts
import mongoose from "mongoose";
import dotenv from "dotenv";
import Player from "../models/Player";
import Formation from "../models/Formation";
import { IdGenerator } from "../utils/idGenerator";

// Charger les variables d'environnement
dotenv.config();

const MONGO_URI = process.env.MONGO_URI || "mongodb://localhost:27017/unity-gacha-game";

interface MigrationStats {
  totalPlayers: number;
  playersWithEquippedHeroes: number;
  formationsCreated: number;
  playersSkipped: number;
  errors: number;
}

/**
 * Migrer les joueurs avec h√©ros √©quip√©s vers le syst√®me de formations
 */
async function migratePlayersToFormations(): Promise<MigrationStats> {
  const stats: MigrationStats = {
    totalPlayers: 0,
    playersWithEquippedHeroes: 0,
    formationsCreated: 0,
    playersSkipped: 0,
    errors: 0
  };

  console.log("üîÑ D√©but de la migration vers le syst√®me de formations...\n");

  try {
    // R√©cup√©rer tous les joueurs
    const players = await Player.find({}).populate("heroes.heroId");
    stats.totalPlayers = players.length;

    console.log(`üìä ${stats.totalPlayers} joueur(s) trouv√©(s)\n`);

    for (const player of players) {
      try {
        // V√©rifier si le joueur a d√©j√† une formation active
        const existingFormation = await Formation.findOne({
          playerId: player._id,
          serverId: player.serverId,
          isActive: true
        });

        if (existingFormation) {
          console.log(`‚úÖ ${player.displayName} (${player._id}) a d√©j√† une formation active`);
          stats.playersSkipped++;
          continue;
        }

        // R√©cup√©rer les h√©ros √©quip√©s
        const equippedHeroes = player.heroes.filter((h: any) => h.equipped);

        if (equippedHeroes.length === 0) {
          console.log(`‚è≠Ô∏è  ${player.displayName} (${player._id}) n'a pas de h√©ros √©quip√©s`);
          stats.playersSkipped++;
          continue;
        }

        stats.playersWithEquippedHeroes++;

        // Cr√©er les slots de formation (max 5 h√©ros)
        const slots = equippedHeroes.slice(0, 5).map((hero: any, index: number) => ({
          slot: index + 1,
          heroId: hero._id.toString()
        }));

        // Cr√©er la formation "Default"
        const defaultFormation = new Formation({
          _id: IdGenerator.generateFormationId(),
          playerId: player._id,
          serverId: player.serverId,
          name: "Default Formation",
          slots: slots,
          isActive: true,
          lastUsed: new Date()
        });

        await defaultFormation.save();

        console.log(
          `‚úÖ ${player.displayName} (${player._id}) - Formation cr√©√©e avec ${slots.length} h√©ros ` +
          `(positions: ${slots.map(s => s.slot).join(", ")})`
        );

        stats.formationsCreated++;

      } catch (error: any) {
        console.error(`‚ùå Erreur pour ${player.displayName} (${player._id}):`, error.message);
        stats.errors++;
      }
    }

    console.log("\n" + "=".repeat(60));
    console.log("üìä R√âSUM√â DE LA MIGRATION");
    console.log("=".repeat(60));
    console.log(`Joueurs totaux:              ${stats.totalPlayers}`);
    console.log(`Joueurs avec h√©ros √©quip√©s:  ${stats.playersWithEquippedHeroes}`);
    console.log(`Formations cr√©√©es:           ${stats.formationsCreated}`);
    console.log(`Joueurs ignor√©s:             ${stats.playersSkipped}`);
    console.log(`Erreurs:                     ${stats.errors}`);
    console.log("=".repeat(60) + "\n");

    if (stats.formationsCreated > 0) {
      console.log("üéâ Migration termin√©e avec succ√®s !");
    } else if (stats.playersSkipped === stats.totalPlayers) {
      console.log("‚ÑπÔ∏è  Aucune migration n√©cessaire - Tous les joueurs ont d√©j√† des formations ou pas de h√©ros √©quip√©s");
    } else {
      console.log("‚ö†Ô∏è  Migration termin√©e avec quelques erreurs");
    }

    return stats;

  } catch (error: any) {
    console.error("üí• Erreur fatale lors de la migration:", error);
    throw error;
  }
}

/**
 * V√©rifier le statut de la migration
 */
async function checkMigrationStatus(): Promise<void> {
  console.log("üîç V√©rification du statut de migration...\n");

  try {
    const totalPlayers = await Player.countDocuments({});
    const playersWithEquipped = await Player.countDocuments({
      "heroes": { $elemMatch: { equipped: true } }
    });

    const totalFormations = await Formation.countDocuments({});
    const activeFormations = await Formation.countDocuments({ isActive: true });

    console.log("üìä STATUT ACTUEL:");
    console.log(`   Joueurs totaux:                  ${totalPlayers}`);
    console.log(`   Joueurs avec h√©ros √©quip√©s:      ${playersWithEquipped}`);
    console.log(`   Formations totales:              ${totalFormations}`);
    console.log(`   Formations actives:              ${activeFormations}`);

    const needsMigration = playersWithEquipped > activeFormations;
    console.log(`   Migration n√©cessaire:            ${needsMigration ? "‚ùå OUI" : "‚úÖ NON"}\n`);

    if (!needsMigration) {
      console.log("‚úÖ Tous les joueurs avec h√©ros √©quip√©s ont une formation active !");
    } else {
      console.log(`‚ö†Ô∏è  ${playersWithEquipped - activeFormations} joueur(s) n√©cessitent une migration`);
    }

  } catch (error: any) {
    console.error("‚ùå Erreur lors de la v√©rification:", error.message);
  }
}

/**
 * Nettoyer les formations de test
 */
async function cleanupTestFormations(): Promise<void> {
  console.log("üßπ Nettoyage des formations de test...\n");

  try {
    // Supprimer les formations orphelines (joueurs n'existent plus)
    const formations = await Formation.find({});
    let deleted = 0;

    for (const formation of formations) {
      const playerExists = await Player.exists({ _id: formation.playerId });
      if (!playerExists) {
        await Formation.deleteOne({ _id: formation._id });
        console.log(`üóëÔ∏è  Formation orpheline supprim√©e: ${formation.name} (${formation._id})`);
        deleted++;
      }
    }

    console.log(`\n‚úÖ ${deleted} formation(s) orpheline(s) supprim√©e(s)\n`);

  } catch (error: any) {
    console.error("‚ùå Erreur lors du nettoyage:", error.message);
  }
}

/**
 * Point d'entr√©e principal
 */
async function main(): Promise<void> {
  const args = process.argv.slice(2);

  // Afficher l'aide
  if (args.includes("--help")) {
    console.log(`
üîß MIGRATION SYST√àME DE FORMATIONS - Utilisation:

  npx ts-node src/scripts/migrateToFormations.ts           # Migration compl√®te
  npx ts-node src/scripts/migrateToFormations.ts --check   # V√©rifier le statut
  npx ts-node src/scripts/migrateToFormations.ts --cleanup # Nettoyer formations orphelines
  npx ts-node src/scripts/migrateToFormations.ts --help    # Afficher cette aide

üìã Description:
  Ce script migre les joueurs utilisant l'ancien syst√®me "equipped"
  vers le nouveau syst√®me de formations.

üéØ Processus:
  1. Trouve tous les joueurs avec des h√©ros √©quip√©s
  2. Cr√©e une formation "Default Formation" pour chacun
  3. Place les h√©ros √©quip√©s dans la formation (max 5)
  4. Active automatiquement la formation

‚ö†Ô∏è  Notes:
  - Les joueurs sans h√©ros √©quip√©s sont ignor√©s
  - Les joueurs ayant d√©j√† une formation sont ignor√©s
  - Les h√©ros gardent leur statut "equipped" pour compatibilit√©
    `);
    return;
  }

  // Connexion √† MongoDB
  try {
    await mongoose.connect(MONGO_URI);
    console.log("‚úÖ Connexion MongoDB √©tablie\n");

    // Ex√©cuter l'action demand√©e
    if (args.includes("--check")) {
      await checkMigrationStatus();
    } else if (args.includes("--cleanup")) {
      await cleanupTestFormations();
    } else {
      // Migration par d√©faut
      await migratePlayersToFormations();
    }

  } catch (error: any) {
    console.error("üí• Erreur fatale:", error.message);
    process.exit(1);
  } finally {
    await mongoose.disconnect();
    console.log("üîå Connexion MongoDB ferm√©e\n");
  }
}

// Ex√©cution du script
if (require.main === module) {
  main().catch((error) => {
    console.error("üí• Erreur non g√©r√©e:", error);
    process.exit(1);
  });
}

export { migratePlayersToFormations, checkMigrationStatus };
