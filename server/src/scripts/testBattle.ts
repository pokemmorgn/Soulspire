import mongoose from "mongoose";
import dotenv from "dotenv";
import Player from "../models/Player";
import Hero from "../models/Hero";
import LevelProgress from "../models/LevelProgress";
import { BattleService } from "../services/BattleService";
import { IBattleOptions } from "../services/BattleEngine";

dotenv.config();

const MONGO_URI = process.env.MONGO_URI || "mongodb://localhost:27017/unity-gacha-game";

const colors = {
  reset: "\x1b[0m",
  bright: "\x1b[1m",
  red: "\x1b[31m",
  green: "\x1b[32m",
  yellow: "\x1b[33m",
  blue: "\x1b[34m",
  magenta: "\x1b[35m",
  cyan: "\x1b[36m"
};

function colorLog(color: string, message: string) {
  console.log(`${color}${message}${colors.reset}`);
}

const testBattle = async (): Promise<void> => {
  try {
    colorLog(colors.cyan, "\nüß™ === TEST COMPLET : AUTO/MANUEL + SKIP/QUIT/RETRY ===\n");
    
    await mongoose.connect(MONGO_URI);
    colorLog(colors.green, "‚úÖ Connect√© √† MongoDB");

    const testPlayer = await getOrCreateTestPlayer();
    colorLog(colors.blue, `üë§ Joueur de test: ${testPlayer.username} (VIP ${testPlayer.vipLevel})`);

    await equipTestHeroes(testPlayer);
    colorLog(colors.blue, `‚öîÔ∏è H√©ros √©quip√©s: ${testPlayer.heroes.filter(h => h.equipped).length}`);

    await displayPlayerTeamWithSpells(testPlayer);

    await runBattleTestsWithModes((testPlayer._id as any).toString());
    
    await testSkipQuitRetry((testPlayer._id as any).toString());

    colorLog(colors.cyan, "\nüéâ === TOUS LES TESTS TERMIN√âS ===\n");
    
  } catch (error) {
    colorLog(colors.red, `‚ùå Erreur lors des tests: ${error}`);
    console.error(error);
  } finally {
    await mongoose.disconnect();
    colorLog(colors.green, "üîå D√©connect√© de MongoDB");
  }
};

async function getOrCreateTestPlayer() {
  let player = await Player.findOne({ username: "AutoManualTestPlayer" });
  
  if (!player) {
    player = new Player({
      username: "AutoManualTestPlayer",
      password: "test123",
      serverId: "S1",
      gold: 10000,
      gems: 1000,
      vipLevel: 5,
      vipExperience: 0,
      world: 1,
      level: 1
    });
    await player.save();
    colorLog(colors.yellow, "üÜï Joueur de test cr√©√© avec VIP 5 (toutes vitesses)");
  } else {
    player.vipLevel = 5;
    await player.save();
    colorLog(colors.blue, "üìã Joueur de test trouv√© - VIP mis √† jour");
  }
  
  return player;
}

async function equipTestHeroes(player: any) {
  const heroesWithSpells = await Hero.find({
    name: { $in: ["Ignara", "Aureon", "Veyron", "Pyra"] }
  }).limit(4);
  
  if (heroesWithSpells.length === 0) {
    colorLog(colors.red, "‚ùå Aucun h√©ros avec sorts trouv√© ! Lancez d'abord le seed des h√©ros.");
    throw new Error("Aucun h√©ros trouv√© en base ! Lancez d'abord le seed des h√©ros.");
  }

  if (player.heroes.length > 0) {
    player.heroes = [];
  }

  for (let i = 0; i < heroesWithSpells.length; i++) {
    const hero = heroesWithSpells[i];
    player.heroes.push({
      heroId: (hero._id as any).toString(),
      level: 15 + i * 5,
      stars: Math.min(6, 3 + i),
      equipped: true
    });
  }
  
  await player.save();
  colorLog(colors.green, `‚ú® ${player.heroes.length} h√©ros avec sorts √©quip√©s`);
}

async function displayPlayerTeamWithSpells(player: any) {
  const populatedPlayer = await Player.findById(player._id).populate("heroes.heroId");
  const equippedHeroes = populatedPlayer!.heroes.filter((h: any) => h.equipped);
  
  colorLog(colors.magenta, "\nüé≠ === √âQUIPE DU JOUEUR AVEC SORTS ===");
  
  for (let i = 0; i < equippedHeroes.length; i++) {
    const playerHero = equippedHeroes[i];
    
    let heroData;
    if (typeof playerHero.heroId === 'string') {
      heroData = await Hero.findById(playerHero.heroId);
    } else {
      heroData = playerHero.heroId;
    }
    
    if (heroData && heroData.name) {
      const levelMultiplier = 1 + (playerHero.level - 1) * 0.08;
      const starMultiplier = 1 + (playerHero.stars - 1) * 0.15;
      const totalMultiplier = levelMultiplier * starMultiplier;
      
      const stats = {
        hp: Math.floor(heroData.baseStats.hp * totalMultiplier),
        atk: Math.floor(heroData.baseStats.atk * totalMultiplier),
        def: Math.floor(heroData.baseStats.def * totalMultiplier),
        intelligence: Math.floor((heroData.baseStats.intelligence || 70) * totalMultiplier),
        moral: Math.floor((heroData.baseStats.moral || 60) * totalMultiplier * 0.6)
      };
      
      console.log(`${i + 1}. ${colors.bright}${heroData.name}${colors.reset}`);
      console.log(`   Role: ${heroData.role} | Element: ${heroData.element} | Rarity: ${heroData.rarity}`);
      console.log(`   Level: ${playerHero.level} | Stars: ${playerHero.stars}`);
      console.log(`   Stats: HP=${stats.hp}, ATK=${stats.atk}, DEF=${stats.def}, INT=${stats.intelligence}, MOR=${stats.moral}`);
      
      if (heroData.spells) {
        colorLog(colors.yellow, "   üîÆ Sorts √©quip√©s:");
        
        if (heroData.spells.spell1?.id) {
          console.log(`      ‚Ä¢ ${heroData.spells.spell1.id} (niveau ${heroData.spells.spell1.level})`);
        }
        if (heroData.spells.spell2?.id) {
          console.log(`      ‚Ä¢ ${heroData.spells.spell2.id} (niveau ${heroData.spells.spell2.level})`);
        }
        if (heroData.spells.spell3?.id) {
          console.log(`      ‚Ä¢ ${heroData.spells.spell3.id} (niveau ${heroData.spells.spell3.level})`);
        }
        if (heroData.spells.ultimate?.id) {
          console.log(`      üåü ULTIMATE: ${heroData.spells.ultimate.id} (niveau ${heroData.spells.ultimate.level})`);
        }
        if (heroData.spells.passive?.id) {
          console.log(`      ‚ö° PASSIF: ${heroData.spells.passive.id} (niveau ${heroData.spells.passive.level})`);
        }
      } else {
        colorLog(colors.red, "   ‚ùå Aucun sort configur√©");
      }
      
      console.log("");
    }
  }
}

async function runBattleTestsWithModes(playerId: string) {
  const testConfigurations = [
    {
      name: "Auto x1 (Gratuit)",
      battleOptions: { mode: "auto" as const, speed: 1 as const },
      world: 1, level: 1, difficulty: "Normal" as const
    },
    {
      name: "Auto x2 (VIP 2+)",
      battleOptions: { mode: "auto" as const, speed: 2 as const },
      world: 1, level: 2, difficulty: "Normal" as const
    },
    {
      name: "Auto x3 (VIP 5+)",
      battleOptions: { mode: "auto" as const, speed: 3 as const },
      world: 1, level: 3, difficulty: "Normal" as const
    },
    {
      name: "Manuel x1 (Ultimates manuels)",
      battleOptions: { mode: "manual" as const, speed: 1 as const },
      world: 1, level: 4, difficulty: "Normal" as const
    },
    {
      name: "Manuel x2 (VIP + Manuel)",
      battleOptions: { mode: "manual" as const, speed: 2 as const },
      world: 1, level: 5, difficulty: "Normal" as const
    },
    {
      name: "Auto Hard x3 (Stress Test)",
      battleOptions: { mode: "auto" as const, speed: 3 as const },
      world: 2, level: 8, difficulty: "Hard" as const
    }
  ];

  for (const config of testConfigurations) {
    colorLog(colors.cyan, `\n‚öîÔ∏è === ${config.name.toUpperCase()} ===`);
    colorLog(colors.blue, `üìç Monde ${config.world}, Niveau ${config.level}, ${config.difficulty}`);
    colorLog(colors.yellow, `üéÆ Mode: ${config.battleOptions.mode}, Vitesse: x${config.battleOptions.speed}`);
    
    try {
      const startTime = Date.now();
      const result = await BattleService.startCampaignBattle(
        playerId, 
        "S1",
        config.world, 
        config.level, 
        config.difficulty,
        config.battleOptions
      );
      const executionTime = Date.now() - startTime;

      displayBattleResultWithModes(result, executionTime, config.battleOptions);
      
      await new Promise(resolve => setTimeout(resolve, 1000));
      
    } catch (error: any) {
      colorLog(colors.red, `‚ùå Erreur: ${error.message}`);
      console.error("Stack trace:", error);
    }
  }
  
  await testVipLimitations(playerId);
  await displayPlayerStats(playerId);
}

function displayBattleResultWithModes(battleResult: any, executionTime: number, battleOptions: IBattleOptions) {
  const { result, replay } = battleResult;
  
  if (result.victory) {
    colorLog(colors.green, `üèÜ VICTOIRE !`);
  } else {
    colorLog(colors.red, `üíÄ D√âFAITE...`);
  }
  
  console.log(`‚è±Ô∏è  Dur√©e simul√©e: ${Math.round(result.battleDuration / 1000)}s`);
  console.log(`üîß Temps d'ex√©cution r√©el: ${executionTime}ms`);
  console.log(`‚ö° Vitesse effective: x${battleOptions.speed} (Mode: ${battleOptions.mode})`);
  console.log(`üéØ Tours total: ${result.totalTurns}`);
  
  colorLog(colors.yellow, "\nüìä Statistiques:");
  console.log(`üí• D√©g√¢ts inflig√©s: ${result.stats.totalDamageDealt}`);
  console.log(`üíö Soins effectu√©s: ${result.stats.totalHealingDone}`);
  console.log(`‚ö° Coups critiques: ${result.stats.criticalHits}`);
  console.log(`üåü Ultimates utilis√©s: ${result.stats.ultimatesUsed}`);
  
  if (replay.actions && replay.actions.length > 0) {
    const actionTypes = replay.actions.reduce((acc: any, action: any) => {
      acc[action.actionType] = (acc[action.actionType] || 0) + 1;
      return acc;
    }, {});
    
    colorLog(colors.cyan, "\nüéÆ Analyse des Actions:");
    console.log(`‚öîÔ∏è  Attaques: ${actionTypes.attack || 0}`);
    console.log(`üîÆ Sorts: ${actionTypes.skill || 0}`);
    console.log(`üåü Ultimates: ${actionTypes.ultimate || 0}`);
    console.log(`‚ö° Passifs: ${actionTypes.passive || 0}`);
    
    if (battleOptions.mode === "manual") {
      colorLog(colors.magenta, `üéØ Mode manuel: Les ultimates auraient √©t√© d√©clench√©s manuellement`);
    }
  }
  
  if (result.victory && result.rewards) {
    colorLog(colors.green, "\nüéÅ R√©compenses:");
    console.log(`üí∞ Or gagn√©: ${result.rewards.gold}`);
    console.log(`‚≠ê Exp√©rience: ${result.rewards.experience}`);
    if (result.rewards.items && result.rewards.items.length > 0) {
      console.log(`üì¶ Objets: ${result.rewards.items.join(", ")}`);
    }
  }
  
  displayTeamStatusWithEffects(replay.playerTeam, "√âQUIPE JOUEUR");
  displayTeamStatusWithEffects(replay.enemyTeam, "√âQUIPE ENNEMIE");
  
  displayBattleActionsWithModes(replay.actions, battleOptions);
}

function displayTeamStatusWithEffects(team: any[], teamName: string) {
  colorLog(colors.magenta, `\nüé≠ ${teamName}:`);
  
  for (const hero of team) {
    const status = hero.status?.alive ? 
      `${colors.green}VIVANT${colors.reset}` : 
      `${colors.red}KO${colors.reset}`;
    const hpPercent = Math.round((hero.currentHp / hero.stats.maxHp) * 100);
    const energy = hero.energy || 0;
    
    console.log(`  ${hero.name}: ${status} (${hero.currentHp}/${hero.stats.maxHp} HP - ${hpPercent}%) | √ânergie: ${energy}`);
    
    if ((hero as any).activeEffects && (hero as any).activeEffects.length > 0) {
      const effects = (hero as any).activeEffects.map((effect: any) => 
        `${effect.id}(${effect.stacks})`
      ).join(", ");
      console.log(`    üé≠ Effets: ${effects}`);
    }
    
    if (hero.status?.buffs?.length > 0) {
      console.log(`    ‚ú® Buffs: ${hero.status.buffs.join(", ")}`);
    }
    if (hero.status?.debuffs?.length > 0) {
      console.log(`    üíÄ Debuffs: ${hero.status.debuffs.join(", ")}`);
    }
  }
}

function displayBattleActionsWithModes(actions: any[], battleOptions: IBattleOptions) {
  colorLog(colors.cyan, `\n‚öîÔ∏è Aper√ßu du combat (mode ${battleOptions.mode}, vitesse x${battleOptions.speed}):`);
  
  const actionsToShow = actions.slice(0, 8);
  
  for (const action of actionsToShow) {
    let actionIcon = "‚öîÔ∏è";
    let actionName = "ATTAQUE";
    
    switch (action.actionType) {
      case "ultimate":
        actionIcon = battleOptions.mode === "manual" ? "üéØ" : "üåü";
        actionName = battleOptions.mode === "manual" ? "ULTIMATE (MANUEL)" : "ULTIMATE";
        break;
      case "skill":
        actionIcon = "üîÆ";
        actionName = "SORT";
        break;
      case "passive":
        actionIcon = "‚ö°";
        actionName = "PASSIF";
        break;
    }
    
    const critical = action.critical ? " (CRITIQUE!)" : "";
    const damage = action.damage ? ` ‚Üí ${action.damage} d√©g√¢ts` : "";
    const healing = action.healing ? ` ‚Üí ${action.healing} soins` : "";
    const effects = action.debuffsApplied?.length > 0 ? ` [${action.debuffsApplied.join(", ")}]` : "";
    
    console.log(`  Tour ${action.turn}: ${action.actorName} ${actionIcon} ${actionName}${damage}${healing}${critical}${effects}`);
  }
  
  if (actions.length > 8) {
    console.log(`  ... et ${actions.length - 8} actions de plus`);
  }
  
  const spellsUsed = actions
    .filter(action => action.actionType === "skill" || action.actionType === "ultimate")
    .reduce((acc: any, action: any) => {
      const key = `${action.actorName} - ${action.actionType}`;
      acc[key] = (acc[key] || 0) + 1;
      return acc;
    }, {});
    
  if (Object.keys(spellsUsed).length > 0) {
    colorLog(colors.yellow, "\nüîÆ Sorts les plus utilis√©s:");
    Object.entries(spellsUsed)
      .sort(([,a], [,b]) => (b as number) - (a as number))
      .slice(0, 5)
      .forEach(([spell, count]) => {
        console.log(`  ‚Ä¢ ${spell}: ${count}x`);
      });
  }
}

async function testVipLimitations(playerId: string) {
  colorLog(colors.cyan, "\nüîí === TEST LIMITATIONS VIP ===");
  
  const player = await Player.findById(playerId);
  if (!player) return;
  
  const originalVipLevel = player.vipLevel;
  
  try {
    player.vipLevel = 0;
    await player.save();
    
    colorLog(colors.yellow, "üìâ Test avec VIP 0 (vitesse x3 interdite):");
    
    try {
      await BattleService.startCampaignBattle(
        playerId, 
        "S1",
        1, 1, "Normal",
        { mode: "auto", speed: 3 }
      );
      colorLog(colors.red, "‚ùå Erreur: La vitesse x3 aurait d√ª √™tre refus√©e");
    } catch (error: any) {
      if (error.message.includes("Vitesse") || error.message.includes("VIP")) {
        colorLog(colors.green, "‚úÖ Limitation VIP correctement appliqu√©e");
      } else {
        colorLog(colors.red, `‚ùå Erreur inattendue: ${error.message}`);
      }
    }
    
    player.vipLevel = originalVipLevel;
    await player.save();
    
  } catch (error: any) {
    colorLog(colors.red, `‚ùå Erreur test VIP: ${error.message}`);
    player.vipLevel = originalVipLevel;
    await player.save();
  }
}

async function testSkipQuitRetry(playerId: string) {
  colorLog(colors.cyan, "\nüéÆ === TEST SKIP/QUIT/RETRY ===");
  
  try {
    colorLog(colors.yellow, "\n1Ô∏è‚É£ Pr√©paration - Combat 3x le m√™me niveau:");
    
    for (let i = 1; i <= 3; i++) {
      console.log(`   Combat ${i}/3...`);
      await BattleService.startCampaignBattle(
        playerId, 
        "S1",
        1, 6, "Normal",
        { mode: "auto", speed: 3 }
      );
    }
    
    const progress = await LevelProgress.getOrCreate(playerId, "S1", 1, 6, "Normal");
    colorLog(colors.green, `‚úÖ Niveau 1-6 d√©bloqu√© pour skip (${progress.victories} victoires)`);
    
    colorLog(colors.yellow, "\n2Ô∏è‚É£ Test Skip:");
    try {
      const skipResult = await BattleService.skipBattle(playerId, "S1", 1, 6, "Normal", progress.bestTime);
      colorLog(colors.green, `‚úÖ Skip r√©ussi: ${skipResult.rewards.gold} or, ${skipResult.rewards.experience} XP (+10% bonus)`);
    } catch (error: any) {
      colorLog(colors.red, `‚ùå Erreur skip: ${error.message}`);
    }
    
    colorLog(colors.yellow, "\n3Ô∏è‚É£ Test Skip impossible (niveau jamais battu):");
    try {
      await BattleService.skipBattle(playerId, "S1", 5, 10, "Normal", 0);
      colorLog(colors.red, "‚ùå Skip aurait d√ª √©chouer");
    } catch (error: any) {
      if (error.message.includes("Skip requires")) {
        colorLog(colors.green, `‚úÖ Skip correctement refus√©: ${error.message}`);
      } else {
        colorLog(colors.red, `‚ùå Erreur inattendue: ${error.message}`);
      }
    }
    
    colorLog(colors.yellow, "\n4Ô∏è‚É£ Test Retry:");
    try {
      const retryResult = await BattleService.startCampaignBattle(
        playerId, 
        "S1",
        1, 6, "Normal",
        { mode: "manual", speed: 2 }
      );
      colorLog(colors.green, `‚úÖ Retry r√©ussi: ${retryResult.result.victory ? "Victoire" : "D√©faite"}`);
    } catch (error: any) {
      colorLog(colors.red, `‚ùå Erreur retry: ${error.message}`);
    }
    
    colorLog(colors.yellow, "\n5Ô∏è‚É£ Test VIP strict (doit √©chouer):");
    const player = await Player.findById(playerId);
    if (player) {
      const originalVip = player.vipLevel;
      player.vipLevel = 1;
      await player.save();
      
      try {
        await BattleService.startCampaignBattle(
          playerId, 
          "S1",
          1, 1, "Normal",
          { mode: "auto", speed: 3 }
        );
        colorLog(colors.red, "‚ùå Combat aurait d√ª √™tre rejet√©");
      } catch (error: any) {
        if (error.message.includes("Vitesse x3 n√©cessite VIP")) {
          colorLog(colors.green, `‚úÖ Validation VIP stricte OK: ${error.message}`);
        } else {
          colorLog(colors.red, `‚ùå Erreur inattendue: ${error.message}`);
        }
      }
      
      player.vipLevel = originalVip;
      await player.save();
    }
    
  } catch (error: any) {
    colorLog(colors.red, `‚ùå Erreur test Skip/Quit/Retry: ${error.message}`);
  }
}

async function displayPlayerStats(playerId: string) {
  try {
    const stats = await BattleService.getPlayerBattleStats(playerId, "S1");
    
    colorLog(colors.cyan, "\nüìà === STATISTIQUES GLOBALES ===");
    console.log(`üéØ Combats total: ${stats.totalBattles}`);
    console.log(`üèÜ Victoires: ${stats.victories}`);
    console.log(`üíÄ D√©faites: ${stats.totalBattles - stats.victories}`);
    console.log(`üìä Taux de victoire: ${Math.round((stats.winRate || 0) * 100)}%`);
    console.log(`üí• D√©g√¢ts total: ${stats.totalDamage}`);
    console.log(`‚è±Ô∏è  Dur√©e moyenne: ${Math.round(stats.avgBattleDuration || 0)}ms`);
    
    colorLog(colors.yellow, "\nüéÆ Performance du syst√®me complet:");
    console.log("‚úÖ Mode auto: Sorts et ultimates automatiques");
    console.log("‚úÖ Mode manuel: Ultimates en attente d'action joueur");
    console.log("‚úÖ Vitesses x1/x2/x3: Calculs ajust√©s selon VIP");
    console.log("‚úÖ Limitations VIP: Validation stricte avec rejet");
    console.log("‚úÖ Skip: Disponible apr√®s 3+ victoires (+10% bonus)");
    console.log("‚úÖ Quit: Abandon possible sans r√©compenses");
    console.log("‚úÖ Retry: Relancer les niveaux d√©j√† tent√©s");
    console.log("‚úÖ Replays: Support des vitesses personnalis√©es");
    
  } catch (error) {
    colorLog(colors.red, "‚ùå Erreur lors de la r√©cup√©ration des stats");
  }
}

function showUsage() {
  colorLog(colors.cyan, "\nüéÆ === SCRIPT DE TEST COMPLET SYST√àME DE COMBAT ===");
  console.log("Ce script teste le syst√®me de combat complet avec:");
  console.log("‚Ä¢ Mode Auto: Tous les sorts et ultimates automatiques");
  console.log("‚Ä¢ Mode Manuel: Sorts auto, ultimates manuels");
  console.log("‚Ä¢ Vitesses x1/x2/x3 selon niveau VIP (validation stricte)");
  console.log("‚Ä¢ Skip: Disponible apr√®s 3+ victoires (r√©compenses normales +10%)");
  console.log("‚Ä¢ Quit: Abandonner un combat sans r√©compenses");
  console.log("‚Ä¢ Retry: Recommencer un niveau d√©j√† tent√©");
  console.log("‚Ä¢ Limitations VIP: Rejet strict des vitesses non autoris√©es");
  console.log("\nPr√©requis:");
  console.log("‚Ä¢ H√©ros cr√©√©s avec: npx ts-node src/scripts/seedHeroes.ts");
  console.log("\nLancement:");
  console.log("npx ts-node src/scripts/testBattle.ts");
  console.log("");
}

if (require.main === module) {
  showUsage();
  testBattle().then(() => process.exit(0));
}

export { testBattle };
