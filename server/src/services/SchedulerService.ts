// src/services/SchedulerService.ts
import * as cron from 'node-cron';
import { ShopService } from './ShopService';

export class SchedulerService {
  private static scheduledTasks: Map<string, any> = new Map();

  // D√©marrer tous les schedulers
  public static startAllSchedulers() {
    console.log("üïê D√©marrage des t√¢ches programm√©es...");

    // Reset des boutiques quotidiennes - tous les jours √† minuit
    this.scheduleTask('daily-shop-reset', '0 0 * * *', async () => {
      console.log("üåÖ Reset quotidien des boutiques...");
      await ShopService.processShopResets();
    });

    // Reset des boutiques hebdomadaires - tous les lundis √† minuit
    this.scheduleTask('weekly-shop-reset', '0 0 * * 1', async () => {
      console.log("üìÖ Reset hebdomadaire des boutiques...");
      await ShopService.processShopResets();
    });

    // Reset des boutiques mensuelles - le 1er de chaque mois √† minuit
    this.scheduleTask('monthly-shop-reset', '0 0 1 * *', async () => {
      console.log("üìÜ Reset mensuel des boutiques...");
      await ShopService.processShopResets();
    });

    // V√©rification g√©n√©rale - toutes les heures
    this.scheduleTask('shop-health-check', '0 * * * *', async () => {
      console.log("üîç V√©rification sant√© des boutiques...");
      try {
        const result = await ShopService.processShopResets();
        if (result.totalReset > 0) {
          console.log(`‚úÖ ${result.totalReset} boutiques mises √† jour automatiquement`);
        }
      } catch (error) {
        console.error("‚ùå Erreur v√©rification boutiques:", error);
      }
    });

    console.log(`‚úÖ ${this.scheduledTasks.size} t√¢ches programm√©es d√©marr√©es`);
  }

  // Programmer une t√¢che sp√©cifique
  private static scheduleTask(name: string, cronExpression: string, task: () => Promise<void>) {
    try {
      const scheduledTask = cron.schedule(cronExpression, async () => {
        console.log(`‚ö° Ex√©cution t√¢che: ${name}`);
        try {
          await task();
        } catch (error) {
          console.error(`‚ùå Erreur t√¢che ${name}:`, error);
        }
      }, {
        timezone: "UTC" // Ajustez selon votre timezone
      });

      // D√©marrer la t√¢che
      scheduledTask.start();

      this.scheduledTasks.set(name, scheduledTask);
      console.log(`üìã T√¢che "${name}" programm√©e: ${cronExpression}`);
      
    } catch (error) {
      console.error(`‚ùå Impossible de programmer la t√¢che ${name}:`, error);
    }
  }

  // Arr√™ter toutes les t√¢ches
  public static stopAllSchedulers() {
    console.log("‚èπÔ∏è Arr√™t des t√¢ches programm√©es...");
    
    this.scheduledTasks.forEach((task, name) => {
      try {
        task.stop();
        console.log(`üõë T√¢che "${name}" arr√™t√©e`);
      } catch (error) {
        console.error(`‚ùå Erreur arr√™t t√¢che ${name}:`, error);
      }
    });
    
    this.scheduledTasks.clear();
    console.log("‚úÖ Toutes les t√¢ches programm√©es arr√™t√©es");
  }

  // Obtenir le statut des t√¢ches
  public static getSchedulerStatus() {
    const tasks = Array.from(this.scheduledTasks.entries()).map(([name, task]) => ({
      name,
      running: task ? true : false // Simplifi√© car pas d'acc√®s direct au statut
    }));

    return {
      totalTasks: this.scheduledTasks.size,
      tasks
    };
  }

  // Ex√©cuter manuellement une t√¢che (pour debug)
  public static async runTaskManually(taskName: string) {
    console.log(`üîß Ex√©cution manuelle: ${taskName}`);
    
    switch (taskName) {
      case 'shop-reset':
        await ShopService.processShopResets();
        break;
      case 'daily-shop-reset':
        console.log("üåÖ Reset quotidien manuel...");
        await ShopService.processShopResets();
        break;
      case 'weekly-shop-reset':
        console.log("üìÖ Reset hebdomadaire manuel...");
        await ShopService.processShopResets();
        break;
      case 'monthly-shop-reset':
        console.log("üìÜ Reset mensuel manuel...");
        await ShopService.processShopResets();
        break;
      default:
        throw new Error(`T√¢che inconnue: ${taskName}`);
    }
    
    console.log(`‚úÖ T√¢che ${taskName} ex√©cut√©e manuellement`);
  }

  // Ajouter une t√¢che personnalis√©e
  public static addCustomTask(name: string, cronExpression: string, task: () => Promise<void>) {
    if (this.scheduledTasks.has(name)) {
      console.warn(`‚ö†Ô∏è T√¢che ${name} existe d√©j√† - √©crasement`);
      const existingTask = this.scheduledTasks.get(name);
      if (existingTask) {
        existingTask.stop();
      }
    }

    this.scheduleTask(name, cronExpression, task);
    console.log(`‚ûï T√¢che personnalis√©e ajout√©e: ${name}`);
  }

  // Supprimer une t√¢che sp√©cifique
  public static removeTask(name: string): boolean {
    const task = this.scheduledTasks.get(name);
    if (task) {
      task.stop();
      this.scheduledTasks.delete(name);
      console.log(`üóëÔ∏è T√¢che ${name} supprim√©e`);
      return true;
    }
    console.warn(`‚ö†Ô∏è T√¢che ${name} introuvable`);
    return false;
  }
}
