// src/services/SchedulerService.ts
import * as cron from 'node-cron';
import { ShopService } from './ShopService';
import { ArenaService } from './arena';
import { GuildManagementService } from './guild/GuildManagementService';
import { GuildActivityService } from './guild/GuildActivityService';
import { DailyRewardsService } from './DailyRewardsService';
import { WebSocketService } from './WebSocketService';
import Guild from '../models/Guild';
import { IdGenerator } from '../utils/idGenerator';
import { ElementalBannerService } from './ElementalBannerService';
import { FreePullService } from './FreePullService';
import Player from '../models/Player';

export class SchedulerService {
  private static scheduledTasks: Map<string, any> = new Map();

  // D√©marrer tous les schedulers
  public static startAllSchedulers() {
    console.log("üïê D√©marrage des t√¢ches programm√©es...");

    // ===== BOUTIQUES =====
    // Reset des boutiques quotidiennes - tous les jours √† minuit
    this.scheduleTask('daily-shop-reset', '0 0 * * *', async () => {
      console.log("üåÖ Reset quotidien des boutiques...");
      await ShopService.processShopResets();
    });

    // Reset des boutiques hebdomadaires - tous les lundis √† minuit
    this.scheduleTask('weekly-shop-reset', '0 0 * * 1', async () => {
      console.log("üìÖ Reset hebdomadaire des boutiques...");
      await ShopService.processShopResets();
    });

    // Reset des boutiques mensuelles - le 1er de chaque mois √† minuit
    this.scheduleTask('monthly-shop-reset', '0 0 1 * *', async () => {
      console.log("üìÜ Reset mensuel des boutiques...");
      await ShopService.processShopResets();
    });

    // ===== DAILY REWARDS =====
    // Reset quotidien des Daily Rewards - tous les jours √† minuit
    this.scheduleTask('daily-rewards-reset', '0 0 * * *', async () => {
      console.log("üéÅ Reset quotidien des Daily Rewards...");
      try {
        const result = await DailyRewardsService.performDailyReset();
        
        if (result.success) {
          console.log(`‚úÖ Reset Daily Rewards termin√©: ${result.processed} joueurs trait√©s, ${result.errors} erreurs`);
          
          // Notifier via WebSocket si besoin
          if (result.processed > 0) {
            WebSocketService.broadcastToServer('S1', 'daily_rewards:daily_reset_completed', {
              processed: result.processed,
              errors: result.errors,
              timestamp: new Date()
            });
          }
        } else {
          console.error("‚ùå √âchec du reset Daily Rewards");
        }
      } catch (error) {
        console.error("‚ùå Erreur reset Daily Rewards:", error);
      }
    });

    // Rappels Daily Rewards - tous les jours √† 18h (6h avant minuit)
    this.scheduleTask('daily-rewards-reminder', '0 18 * * *', async () => {
      console.log("‚è∞ Envoi des rappels Daily Rewards...");
      try {
        // TODO: Impl√©menter l'envoi de rappels aux joueurs qui n'ont pas claim
        // Pour l'instant, juste un log
        console.log("üì¨ Rappels Daily Rewards √† impl√©menter (feature future)");
      } catch (error) {
        console.error("‚ùå Erreur rappels Daily Rewards:", error);
      }
    });

    // ===== BANNI√àRES √âL√âMENTAIRES =====
    // Rotation quotidienne des banni√®res √©l√©mentaires - tous les jours √† minuit
    this.scheduleTask('elemental-banner-rotation', '0 0 * * *', async () => {
      console.log("üîÑ Rotation quotidienne des banni√®res √©l√©mentaires...");
      try {
        const servers = ['S1', 'S2', 'S3']; // Liste de tes serveurs
        
        for (const serverId of servers) {
          await ElementalBannerService.performDailyRotation(serverId);
        }
        
        console.log("‚úÖ Rotation √©l√©mentaire termin√©e pour tous les serveurs");
      } catch (error) {
        console.error("‚ùå Erreur rotation banni√®res √©l√©mentaires:", error);
      }
    });

    // Activation boutique vendredi - tous les vendredis √† minuit
    this.scheduleTask('elemental-shop-friday', '0 0 * * 5', async () => {
      console.log("üõí Ouverture boutique √©l√©mentaire (vendredi)...");
      try {
        const servers = ['S1', 'S2', 'S3'];
        
        for (const serverId of servers) {
          // Notifier via WebSocket
          WebSocketService.broadcastToServer(serverId, 'elemental:shop_opened', {
            duration: 24,
            specialOffers: true,
            message: "Elemental shop is now open! Special ticket packs available."
          });
        }
        
        console.log("‚úÖ Notifications boutique √©l√©mentaire envoy√©es");
      } catch (error) {
        console.error("‚ùå Erreur notification boutique √©l√©mentaire:", error);
      }
    });

    // Augmentation du taux de drop vendredi - tous les vendredis √† minuit
    this.scheduleTask('elemental-friday-boost', '0 0 * * 5', async () => {
      console.log("üéâ Activation boost tickets √©l√©mentaires (vendredi 15%)...");
      try {
        const servers = ['S1', 'S2', 'S3'];
        
        for (const serverId of servers) {
          WebSocketService.broadcastToServer(serverId, 'elemental:drop_boost_active', {
            dropRate: 15,
            normalRate: 5,
            multiplier: 3,
            duration: 24,
            message: "Friday Bonus: 15% drop rate for elemental tickets!"
          });
        }
        
        console.log("‚úÖ Boost vendredi activ√©");
      } catch (error) {
        console.error("‚ùå Erreur boost vendredi:", error);
      }
    });

    // Rappel rotation dimanche (tous les √©l√©ments disponibles)
    this.scheduleTask('elemental-sunday-reminder', '0 18 * * 6', async () => {
      console.log("üì¢ Rappel: Dimanche tous les √©l√©ments disponibles...");
      try {
        const servers = ['S1', 'S2', 'S3'];
        
        for (const serverId of servers) {
          WebSocketService.broadcastToServer(serverId, 'elemental:sunday_reminder', {
            message: "Tomorrow: All elemental banners will be available!",
            elements: ["Fire", "Water", "Wind", "Electric", "Light", "Shadow"],
            hoursUntil: 6
          });
        }
        
        console.log("‚úÖ Rappel dimanche envoy√©");
      } catch (error) {
        console.error("‚ùå Erreur rappel dimanche:", error);
      }
    });

    // ===== PULLS GRATUITS =====
    // Reset automatique des pulls gratuits - toutes les heures
    this.scheduleTask('free-pulls-auto-reset', '0 * * * *', async () => {
      console.log("üéÅ V√©rification reset automatique pulls gratuits...");
      try {
        const result = await this.processFreePullsReset();
        
        if (result.totalReset > 0) {
          console.log(`‚úÖ Reset pulls gratuits: ${result.totalReset} joueurs trait√©s`);
          console.log(`   - Daily: ${result.dailyReset} resets`);
          console.log(`   - Weekly: ${result.weeklyReset} resets`);
          console.log(`   - Monthly: ${result.monthlyReset} resets`);
          
          // Notifier via WebSocket les joueurs concern√©s
          for (const resetInfo of result.resetDetails) {
            WebSocketService.sendToPlayer(resetInfo.playerId, 'gacha:free_pulls_reset', {
              bannerId: resetInfo.bannerId,
              bannerName: resetInfo.bannerName,
              pullsAvailable: resetInfo.pullsAvailable,
              resetType: resetInfo.resetType,
              nextResetAt: resetInfo.nextResetAt
            });
          }
        }
      } catch (error) {
        console.error("‚ùå Erreur reset pulls gratuits:", error);
      }
    });

    // Rappel pulls gratuits non utilis√©s - tous les jours √† 20h
    this.scheduleTask('free-pulls-reminder', '0 20 * * *', async () => {
      console.log("‚è∞ Envoi rappels pulls gratuits non utilis√©s...");
      try {
        const result = await this.sendFreePullsReminders();
        
        if (result.remindersSent > 0) {
          console.log(`üì¨ ${result.remindersSent} rappels envoy√©s`);
        }
      } catch (error) {
        console.error("‚ùå Erreur rappels pulls gratuits:", error);
      }
    });

    // ===== AR√àNE =====
    // Maintenance quotidienne de l'ar√®ne - tous les jours √† 1h du matin
    this.scheduleTask('arena-daily-maintenance', '0 1 * * *', async () => {
      console.log("üèüÔ∏è Maintenance quotidienne de l'ar√®ne...");
      try {
        const servers = ['S1', 'S2', 'S3']; // Remplace par ta liste de serveurs
        
        for (const serverId of servers) {
          await ArenaService.performDailyMaintenance(serverId);
        }
        
        console.log("‚úÖ Maintenance ar√®ne termin√©e pour tous les serveurs");
      } catch (error) {
        console.error("‚ùå Erreur maintenance ar√®ne:", error);
      }
    });

    // Reset classements ar√®ne - tous les jours √† 2h du matin
    this.scheduleTask('arena-rankings-update', '0 2 * * *', async () => {
      console.log("üìä Mise √† jour des classements d'ar√®ne...");
      try {
        const servers = ['S1', 'S2', 'S3'];
        
        for (const serverId of servers) {
          await ArenaService.getServerArenaStats(serverId);
        }
        
        console.log("‚úÖ Classements ar√®ne mis √† jour");
      } catch (error) {
        console.error("‚ùå Erreur mise √† jour classements ar√®ne:", error);
      }
    });

    // √âv√©nements sp√©ciaux ar√®ne - v√©rification toutes les 6 heures
    this.scheduleTask('arena-events-check', '0 */6 * * *', async () => {
      console.log("üéâ V√©rification √©v√©nements sp√©ciaux ar√®ne...");
      try {
        const now = new Date();
        const isWeekend = now.getDay() === 0 || now.getDay() === 6;
        
        await ArenaService.toggleSpecialEvent("bonusWeekend", isWeekend);
        
        if (isWeekend) {
          console.log("üéÆ Bonus weekend ar√®ne activ√©");
        }
      } catch (error) {
        console.error("‚ùå Erreur √©v√©nements ar√®ne:", error);
      }
    });

    // ===== GUILDES =====
    // Maintenance quotidienne des guildes - tous les jours √† 3h du matin
    this.scheduleTask('guild-daily-maintenance', '0 3 * * *', async () => {
      console.log("üèõÔ∏è Maintenance quotidienne des guildes...");
      try {
        const servers = ['S1', 'S2', 'S3'];
        let totalResults = {
          guildsProcessed: 0,
          inactiveMembersRemoved: 0,
          expiredInvitationsCleared: 0,
          dailyRewardsReset: 0,
          leadershipTransfers: 0
        };
        
        for (const serverId of servers) {
          const result = await this.performGuildDailyMaintenance(serverId);
          totalResults.guildsProcessed += result.guildsProcessed;
          totalResults.inactiveMembersRemoved += result.inactiveMembersRemoved;
          totalResults.expiredInvitationsCleared += result.expiredInvitationsCleared;
          totalResults.dailyRewardsReset += result.dailyRewardsReset;
          totalResults.leadershipTransfers += result.leadershipTransfers;
        }
        
        console.log(`‚úÖ Maintenance guildes termin√©e: ${totalResults.guildsProcessed} guildes, ${totalResults.inactiveMembersRemoved} membres inactifs supprim√©s, ${totalResults.leadershipTransfers} transferts de leadership`);
      } catch (error) {
        console.error("‚ùå Erreur maintenance guildes:", error);
      }
    });

    // üî• NOUVEAU: V√©rification leadership toutes les 12h (midi et minuit)
    this.scheduleTask('guild-leadership-check', '0 0,12 * * *', async () => {
      console.log("üëë V√©rification automatique des leaders inactifs...");
      try {
        const servers = ['S1', 'S2', 'S3'];
        let totalTransfers = 0;
        
        for (const serverId of servers) {
          const leadershipCheck = await GuildManagementService.checkAllInactiveLeadersOnServer(serverId);
          totalTransfers += leadershipCheck.transfersPerformed;
          
          if (leadershipCheck.transfersPerformed > 0) {
            console.log(`üëë ${serverId}: ${leadershipCheck.transfersPerformed} transferts de leadership effectu√©s`);
            
            // Notifier via WebSocket pour monitoring
            WebSocketService.broadcastToServer(serverId, 'guild:leadership_transfers_completed', {
              serverTransfers: leadershipCheck.transfersPerformed,
              guildsChecked: leadershipCheck.guildsChecked,
              transfers: leadershipCheck.transfers
            });
          }
        }
        
        console.log(`‚úÖ V√©rification leadership termin√©e: ${totalTransfers} transferts au total`);
      } catch (error) {
        console.error("‚ùå Erreur v√©rification leadership:", error);
      }
    });

    // Auto-start des qu√™tes quotidiennes - tous les jours √† 4h du matin
    this.scheduleTask('guild-daily-quests', '0 4 * * *', async () => {
      console.log("üìã D√©marrage automatique des qu√™tes quotidiennes...");
      try {
        await this.autoStartDailyQuests();
        console.log("‚úÖ Qu√™tes quotidiennes d√©marr√©es");
      } catch (error) {
        console.error("‚ùå Erreur d√©marrage qu√™tes quotidiennes:", error);
      }
    });

    // Maintenance hebdomadaire des guildes - tous les lundis √† 4h du matin
    this.scheduleTask('guild-weekly-maintenance', '0 4 * * 1', async () => {
      console.log("üìÖ Maintenance hebdomadaire des guildes...");
      try {
        const servers = ['S1', 'S2', 'S3'];
        
        for (const serverId of servers) {
          await GuildManagementService.performWeeklyMaintenance(serverId);
        }
        
        console.log("‚úÖ Maintenance hebdomadaire guildes termin√©e");
      } catch (error) {
        console.error("‚ùå Erreur maintenance hebdomadaire guildes:", error);
      }
    });

    // Nettoyage des raids expir√©s - toutes les heures
    this.scheduleTask('guild-raids-cleanup', '0 * * * *', async () => {
      console.log("‚öîÔ∏è Nettoyage des raids expir√©s...");
      try {
        await this.cleanupExpiredRaids();
      } catch (error) {
        console.error("‚ùå Erreur nettoyage raids:", error);
      }
    });

    // √âv√©nements sp√©ciaux guildes - tous les vendredis √† 18h
    this.scheduleTask('guild-weekend-events', '0 18 * * 5', async () => {
      console.log("üéâ Activation √©v√©nements weekend guildes...");
      try {
        await this.activateWeekendGuildEvents();
      } catch (error) {
        console.error("‚ùå Erreur √©v√©nements guildes:", error);
      }
    });

    // ===== V√âRIFICATIONS G√âN√âRALES =====
    // V√©rification g√©n√©rale boutiques - toutes les heures
    this.scheduleTask('shop-health-check', '0 * * * *', async () => {
      console.log("üîç V√©rification sant√© des boutiques...");
      try {
        const result = await ShopService.processShopResets();
        if (result.totalReset > 0) {
          console.log(`‚úÖ ${result.totalReset} boutiques mises √† jour automatiquement`);
        }
      } catch (error) {
        console.error("‚ùå Erreur v√©rification boutiques:", error);
      }
    });

    console.log(`‚úÖ ${this.scheduledTasks.size} t√¢ches programm√©es d√©marr√©es`);
  }

  // ===== M√âTHODES GUILDES =====

  /**
   * üî• MISE √Ä JOUR: Maintenance quotidienne des guildes avec transfert de leadership
   */
  private static async performGuildDailyMaintenance(serverId: string): Promise<{
    guildsProcessed: number;
    inactiveMembersRemoved: number;
    expiredInvitationsCleared: number;
    dailyRewardsReset: number;
    leadershipTransfers: number;
  }> {
    try {
      const guilds = await Guild.find({ serverId, status: "active" });
      let inactiveMembersRemoved = 0;
      let expiredInvitationsCleared = 0;
      let dailyRewardsReset = 0;
      let leadershipTransfers = 0;

      for (const guild of guilds) {
        // 1. Nettoyer les invitations expir√©es
        const invitationsBefore = guild.invitations.length;
        await guild.cleanupExpiredInvitations();
        const invitationsAfter = guild.invitations.length;
        expiredInvitationsCleared += (invitationsBefore - invitationsAfter);

        // 2. üëë NOUVEAU: V√©rifier et transf√©rer leadership si n√©cessaire
        try {
          const leadershipResult = await GuildManagementService.checkAndTransferInactiveLeadership(guild._id);
          if (leadershipResult.success && leadershipResult.transferred) {
            leadershipTransfers++;
            console.log(`üëë Leadership transf√©r√© dans ${guild.name}: ${leadershipResult.oldLeader?.playerName} ‚Üí ${leadershipResult.newLeader?.playerName}`);
          }
        } catch (error) {
          console.error(`‚ùå Erreur transfert leadership pour ${guild.name}:`, error);
        }

        // 3. Supprimer les membres inactifs SEULEMENT si activ√© par le leader
        if (guild.settings.autoKickInactiveMembers) {
          const thresholdDays = guild.settings.inactivityThresholdDays || 7;
          const inactiveMembers = guild.members.filter((member: any) => {
            const daysSinceActive = (Date.now() - member.lastActiveAt.getTime()) / (1000 * 60 * 60 * 24);
            return daysSinceActive > thresholdDays && member.role !== "leader";
          });
        
          for (const member of inactiveMembers) {
            await guild.removeMember(member.playerId, "inactive");
            
            // Notifier via WebSocket
            WebSocketService.notifyGuildMemberLeft(guild._id, {
              playerId: member.playerId,
              playerName: member.playerName,
              reason: 'inactive'
            });
        
            inactiveMembersRemoved++;
          }
        
          if (inactiveMembers.length > 0) {
            console.log(`üßπ ${guild.name}: ${inactiveMembers.length} membres inactifs supprim√©s automatiquement (seuil: ${thresholdDays} jours)`);
          }
        } else {
          console.log(`‚è∏Ô∏è ${guild.name}: Auto-kick d√©sactiv√© - membres inactifs conserv√©s`);
        }

        // 4. Reset des r√©compenses quotidiennes
        await guild.resetDailyProgress();
        dailyRewardsReset++;

        // Notifier les nouvelles r√©compenses disponibles
        WebSocketService.notifyGuildDailyRewards(guild._id, {
          rewardType: 'daily',
          totalEligibleMembers: guild.memberCount,
          claimedBy: 0,
          rewards: guild.rewards.dailyRewards.rewards
        });

        // 5. Mettre √† jour les statistiques
        await guild.updateStats();
      }

      return {
        guildsProcessed: guilds.length,
        inactiveMembersRemoved,
        expiredInvitationsCleared,
        dailyRewardsReset,
        leadershipTransfers
      };

    } catch (error) {
      console.error(`‚ùå Error in guild daily maintenance for ${serverId}:`, error);
      return {
        guildsProcessed: 0,
        inactiveMembersRemoved: 0,
        expiredInvitationsCleared: 0,
        dailyRewardsReset: 0,
        leadershipTransfers: 0
      };
    }
  }

  /**
   * D√©marrer automatiquement les qu√™tes quotidiennes
   */
  private static async autoStartDailyQuests(): Promise<void> {
    try {
      const guilds = await Guild.find({ status: "active", level: { $gte: 3 } });
      let questsStarted = 0;

      for (const guild of guilds) {
        // V√©rifier s'il y a d√©j√† des qu√™tes actives aujourd'hui
        const today = new Date().toDateString();
        const hasActiveDailyQuest = guild.currentQuests.some((quest: any) => 
          quest.questType === 'daily' && 
          quest.startDate.toDateString() === today
        );

        if (hasActiveDailyQuest) continue;

        // S√©lectionner une qu√™te quotidienne au hasard
        const dailyQuestTemplates = [
          'daily_contribution', 
          'daily_battles', 
          'daily_summons', 
          'daily_tower',
          'daily_campaign'
        ];
        
        const randomTemplate = dailyQuestTemplates[Math.floor(Math.random() * dailyQuestTemplates.length)];
        
        const result = await GuildActivityService.startGuildQuest(guild._id, 'daily', randomTemplate);
        if (result.success && result.quest) {
          // Notifier via WebSocket
          WebSocketService.notifyGuildQuestStarted(guild._id, {
            questId: result.quest.questId,
            name: result.quest.name,
            description: result.quest.description,
            questType: result.quest.questType,
            targetValue: result.quest.targetValue,
            endDate: result.quest.endDate,
            rewards: result.quest.rewards
          });
          
          questsStarted++;
        }
      }

      console.log(`üìã ${questsStarted} qu√™tes quotidiennes d√©marr√©es automatiquement`);

    } catch (error) {
      console.error("‚ùå Error auto-starting daily quests:", error);
    }
  }

  /**
   * Nettoyer les raids expir√©s
   */
  private static async cleanupExpiredRaids(): Promise<void> {
    try {
      const guilds = await Guild.find({ 
        status: "active",
        currentRaid: { $exists: true, $ne: null }
      });

      let raidsCompleted = 0;
      const now = new Date();

      for (const guild of guilds) {
        if (guild.currentRaid && guild.currentRaid.endTime < now) {
          // Raid expir√©
          if (guild.currentRaid.status === "active") {
            // Marquer comme √©chou√© si encore actif
            guild.currentRaid.status = "failed";
            
            // Notifier les participants
            WebSocketService.sendToPlayer(guild.currentRaid.participants[0]?.playerId || 'system', 'guild:raid_expired', {
              raidName: guild.currentRaid.name,
              reason: 'timeout'
            });
          }
          
          // D√©placer vers l'historique
          await guild.completeRaid(guild.currentRaid.raidId);
          raidsCompleted++;
        }
      }

      if (raidsCompleted > 0) {
        console.log(`‚öîÔ∏è ${raidsCompleted} raids expir√©s nettoy√©s`);
      }

    } catch (error) {
      console.error("‚ùå Error cleaning up expired raids:", error);
    }
  }

  /**
   * Activer les √©v√©nements weekend pour les guildes
   */
  private static async activateWeekendGuildEvents(): Promise<void> {
    try {
      const servers = ['S1', 'S2', 'S3'];
      
      for (const serverId of servers) {
        // Activer bonus contributions weekend
        WebSocketService.notifyGuildEvent(serverId, {
          eventType: 'bonus_contributions',
          eventName: 'Weekend Bonus',
          description: 'Double contribution points during weekend!',
          duration: 72, // 72h (vendredi 18h -> lundi 18h)
          bonusMultiplier: 2,
          specialRewards: {
            extraGuildExp: 1000,
            bonusGuildCoins: 500
          }
        });
      }

      console.log("üéâ √âv√©nements weekend guildes activ√©s");

    } catch (error) {
      console.error("‚ùå Error activating weekend guild events:", error);
    }
  }

  // ===== M√âTHODES PULLS GRATUITS =====

  /**
   * Traiter automatiquement les resets de pulls gratuits
   */
/**
 * Traiter automatiquement les resets de pulls gratuits (OPTIMIS√â pour haute performance)
 */
private static async processFreePullsReset(): Promise<{
  totalReset: number;
  dailyReset: number;
  weeklyReset: number;
  monthlyReset: number;
  resetDetails: Array<{
    playerId: string;
    bannerId: string;
    bannerName: string;
    pullsAvailable: number;
    resetType: string;
    nextResetAt: Date;
  }>;
}> {
  try {
    const now = new Date();
    const result = {
      totalReset: 0,
      dailyReset: 0,
      weeklyReset: 0,
      monthlyReset: 0,
      resetDetails: [] as any[]
    };

    // Configuration
    const BATCH_SIZE = 1000; // Nombre de joueurs √† traiter par batch
    const PARALLEL_LIMIT = 20; // Nombre de resets en parall√®le
    const MAX_DETAILS = 100; // Limite de d√©tails stock√©s pour √©viter surcharge m√©moire

    console.log(`üéÅ D√©marrage du reset automatique des pulls gratuits...`);

    // ‚úÖ R√©cup√©rer dynamiquement tous les serveurs actifs
    const activeServers = await Player.distinct('serverId');
    console.log(`üåç ${activeServers.length} serveur(s) d√©tect√©(s): ${activeServers.join(', ')}`);

    // Traiter serveur par serveur pour mieux r√©partir la charge
    for (const serverId of activeServers) {
      console.log(`\nüîç Traitement du serveur ${serverId}...`);
      
      let skip = 0;
      let hasMore = true;
      let serverResets = 0;
      let batchNumber = 0;

      while (hasMore) {
        batchNumber++;

        // R√©cup√©rer un batch de joueurs avec pulls gratuits expir√©s
        const players = await Player.find({
          serverId,
          'freePulls.nextResetAt': { $lte: now }
        })
        .select('_id serverId freePulls displayName')
        .skip(skip)
        .limit(BATCH_SIZE)
        .lean(); // Utiliser lean() pour meilleures performances

        if (players.length === 0) {
          hasMore = false;
          break;
        }

        console.log(`   üì¶ Batch ${batchNumber}: ${players.length} joueur(s) √† v√©rifier`);

        // R√©cup√©rer toutes les banni√®res n√©cessaires en une seule requ√™te
        const allBannerIds = new Set<string>();
        players.forEach(player => {
          player.freePulls?.forEach((fp: any) => {
            if (fp.nextResetAt <= now) {
              allBannerIds.add(fp.bannerId);
            }
          });
        });

        if (allBannerIds.size === 0) {
          console.log(`   ‚è≠Ô∏è Aucune banni√®re √† traiter dans ce batch`);
          skip += BATCH_SIZE;
          continue;
        }

        const Banner = (await import('../models/Banner')).default;
        const banners = await Banner.find({
          bannerId: { $in: Array.from(allBannerIds) },
          'freePullConfig.enabled': true
        }).select('bannerId name freePullConfig').lean();

        console.log(`   üé∞ ${banners.length} banni√®re(s) active(s) dans ce batch`);

        // Cr√©er un map pour acc√®s rapide
        const bannerMap = new Map(
          banners.map(b => [b.bannerId, b])
        );

        // Traiter les joueurs par chunks pour limiter la concurrence
        const chunks: any[][] = [];
        for (let i = 0; i < players.length; i += PARALLEL_LIMIT) {
          chunks.push(players.slice(i, i + PARALLEL_LIMIT));
        }

        for (let chunkIndex = 0; chunkIndex < chunks.length; chunkIndex++) {
          const chunk = chunks[chunkIndex];
          
          const settledResults = await Promise.allSettled(
            chunk.map(async (playerData: any) => {
              try {
                // R√©cup√©rer le player document complet (n√©cessaire pour les m√©thodes)
                const player = await Player.findById(playerData._id);
                if (!player) return { success: false, reason: 'not_found' };

                let playerResets = 0;

                for (const tracker of player.freePulls) {
                  if (tracker.nextResetAt <= now) {
                    const banner = bannerMap.get(tracker.bannerId);

                    if (!banner || !banner.freePullConfig) {
                      continue;
                    }

                    const config = banner.freePullConfig;

                    // Calculer la prochaine date de reset
                    const nextResetAt = FreePullService.calculateNextResetDate(config.resetType);

                    // Effectuer le reset
                    await player.resetFreePulls(
                      tracker.bannerId,
                      config.pullsPerReset,
                      nextResetAt
                    );

                    playerResets++;

                    // Incr√©menter les compteurs
                    result.totalReset++;
                    serverResets++;
                    
                    switch (config.resetType) {
                      case 'daily':
                        result.dailyReset++;
                        break;
                      case 'weekly':
                        result.weeklyReset++;
                        break;
                      case 'monthly':
                        result.monthlyReset++;
                        break;
                    }

                    // Ajouter aux d√©tails (limiter pour √©viter surcharge m√©moire)
                    if (result.resetDetails.length < MAX_DETAILS) {
                      result.resetDetails.push({
                        playerId: player._id,
                        bannerId: tracker.bannerId,
                        bannerName: banner.name,
                        pullsAvailable: config.pullsPerReset,
                        resetType: config.resetType,
                        nextResetAt
                      });
                    }
                  }
                }

                if (playerResets > 0) {
                  console.log(`      ‚úì ${player.displayName}: ${playerResets} reset(s)`);
                }

                return { success: true, resets: playerResets };

              } catch (error) {
                console.error(`      ‚úó Erreur joueur ${playerData._id}:`, error);
                return { success: false, error };
              }
            })
          );

          // Compter les succ√®s/√©checs
          const successful = settledResults.filter(r => r.status === 'fulfilled' && (r.value as any)?.success).length;
          const failed = settledResults.length - successful;

          if (failed > 0) {
            console.log(`      ‚ö†Ô∏è Chunk ${chunkIndex + 1}/${chunks.length}: ${successful} OK, ${failed} √©chec(s)`);
          }
        }

        skip += BATCH_SIZE;

        // Pause de 100ms entre les batchs pour √©viter surcharge DB
        if (hasMore && players.length === BATCH_SIZE) {
          await new Promise(resolve => setTimeout(resolve, 100));
        } else {
          hasMore = false; // Dernier batch (moins de BATCH_SIZE joueurs)
        }
      }

      console.log(`   ‚úÖ Serveur ${serverId}: ${serverResets} reset(s) effectu√©(s)`);
    }

    console.log(`\nüéâ Reset global termin√©:`);
    console.log(`   - Serveurs trait√©s: ${activeServers.length}`);
    console.log(`   - Total: ${result.totalReset} reset(s)`);
    console.log(`   - Daily: ${result.dailyReset}`);
    console.log(`   - Weekly: ${result.weeklyReset}`);
    console.log(`   - Monthly: ${result.monthlyReset}`);

    return result;

  } catch (error) {
    console.error("‚ùå Error in processFreePullsReset:", error);
    return {
      totalReset: 0,
      dailyReset: 0,
      weeklyReset: 0,
      monthlyReset: 0,
      resetDetails: []
    };
  }
}
  /**
   * Envoyer des rappels aux joueurs qui ont des pulls gratuits non utilis√©s
   */
  private static async sendFreePullsReminders(): Promise<{
    remindersSent: number;
    playersNotified: string[];
  }> {
    try {
      const now = new Date();
      const result = {
        remindersSent: 0,
        playersNotified: [] as string[]
      };

      // R√©cup√©rer les joueurs avec pulls gratuits disponibles
      const players = await Player.find({
        'freePulls': {
          $elemMatch: {
            pullsAvailable: { $gt: 0 },
            nextResetAt: { $lte: new Date(now.getTime() + 4 * 60 * 60 * 1000) } // Dans moins de 4h
          }
        }
        }).select('_id serverId freePulls displayName');

      console.log(`üì¨ ${players.length} joueurs avec pulls gratuits √† rappeler...`);

      for (const player of players) {
        const availablePulls = player.freePulls.filter(
          fp => fp.pullsAvailable > 0 && fp.nextResetAt <= new Date(now.getTime() + 4 * 60 * 60 * 1000)
        );

        if (availablePulls.length > 0) {
          // R√©cup√©rer les noms des banni√®res
          const Banner = (await import('../models/Banner')).default;
          const bannerIds = availablePulls.map(fp => fp.bannerId);
          const banners = await Banner.find({ bannerId: { $in: bannerIds } }).select('bannerId name');

          const bannerMap = new Map(banners.map(b => [b.bannerId, b.name]));

          // Envoyer notification via WebSocket
          WebSocketService.sendToPlayer(player._id, 'gacha:free_pulls_reminder', {
            message: `You have ${availablePulls.length} free pull(s) available!`,
            banners: availablePulls.map(fp => ({
              bannerId: fp.bannerId,
              bannerName: bannerMap.get(fp.bannerId) || 'Unknown Banner',
              pullsAvailable: fp.pullsAvailable,
              expiresIn: Math.round((fp.nextResetAt.getTime() - now.getTime()) / (1000 * 60 * 60)) // heures
            })),
            priority: 'medium'
          });

          result.remindersSent++;
          result.playersNotified.push(player._id);

          console.log(`üìß Rappel envoy√© √† ${player.displayName}: ${availablePulls.length} pull(s) gratuit(s)`);
        }
      }

      return result;

    } catch (error) {
      console.error("‚ùå Error in sendFreePullsReminders:", error);
      return {
        remindersSent: 0,
        playersNotified: []
      };
    }
  }

  // ===== M√âTHODES EXISTANTES =====

  // Programmer une t√¢che sp√©cifique
  private static scheduleTask(name: string, cronExpression: string, task: () => Promise<void>) {
    try {
      const scheduledTask = cron.schedule(cronExpression, async () => {
        console.log(`‚ö° Ex√©cution t√¢che: ${name}`);
        try {
          await task();
        } catch (error) {
          console.error(`‚ùå Erreur t√¢che ${name}:`, error);
        }
      }, {
        timezone: "UTC"
      });

      scheduledTask.start();
      this.scheduledTasks.set(name, scheduledTask);
      console.log(`üìã T√¢che "${name}" programm√©e: ${cronExpression}`);
      
    } catch (error) {
      console.error(`‚ùå Impossible de programmer la t√¢che ${name}:`, error);
    }
  }

  // Arr√™ter toutes les t√¢ches
  public static stopAllSchedulers() {
    console.log("‚èπÔ∏è Arr√™t des t√¢ches programm√©es...");
    
    this.scheduledTasks.forEach((task, name) => {
      try {
        task.stop();
        console.log(`üõë T√¢che "${name}" arr√™t√©e`);
      } catch (error) {
        console.error(`‚ùå Erreur arr√™t t√¢che ${name}:`, error);
      }
    });
    
    this.scheduledTasks.clear();
    console.log("‚úÖ Toutes les t√¢ches programm√©es arr√™t√©es");
  }

  // Obtenir le statut des t√¢ches
  public static getSchedulerStatus() {
    const tasks = Array.from(this.scheduledTasks.entries()).map(([name, task]) => ({
      name,
      running: task ? true : false
    }));

    return {
      totalTasks: this.scheduledTasks.size,
      tasks
    };
  }

  // Ex√©cuter manuellement une t√¢che (pour debug)
  public static async runTaskManually(taskName: string) {
    console.log(`üîß Ex√©cution manuelle: ${taskName}`);
    
    switch (taskName) {
      case 'shop-reset':
        await ShopService.processShopResets();
        break;
      case 'daily-shop-reset':
        console.log("üåÖ Reset quotidien manuel...");
        await ShopService.processShopResets();
        break;
      case 'weekly-shop-reset':
        console.log("üìÖ Reset hebdomadaire manuel...");
        await ShopService.processShopResets();
        break;
      case 'monthly-shop-reset':
        console.log("üìÜ Reset mensuel manuel...");
        await ShopService.processShopResets();
        break;
      case 'arena-daily-maintenance':
        console.log("üèüÔ∏è Maintenance ar√®ne manuelle...");
        await ArenaService.performDailyMaintenance('S1');
        break;
      case 'arena-rankings-update':
        console.log("üìä Mise √† jour classements manuelle...");
        await ArenaService.getServerArenaStats('S1');
        break;
      case 'arena-events-check':
        console.log("üéâ V√©rification √©v√©nements ar√®ne manuelle...");
        await ArenaService.toggleSpecialEvent("doubleRewards", true);
        break;
      // ===== T√ÇCHES GUILDES =====
      case 'guild-daily-maintenance':
        console.log("üèõÔ∏è Maintenance guildes manuelle...");
        await this.performGuildDailyMaintenance('S1');
        break;
      case 'guild-leadership-check':
        console.log("üëë V√©rification leadership manuelle...");
        const leadershipResult = await GuildManagementService.checkAllInactiveLeadersOnServer('S1');
        console.log(`‚úÖ ${leadershipResult.transfersPerformed} transferts effectu√©s sur ${leadershipResult.guildsChecked} guildes`);
        break;
      case 'guild-daily-quests':
        console.log("üìã D√©marrage qu√™tes quotidiennes manuel...");
        await this.autoStartDailyQuests();
        break;
      case 'guild-weekly-maintenance':
        console.log("üìÖ Maintenance hebdomadaire guildes manuelle...");
        await GuildManagementService.performWeeklyMaintenance('S1');
        break;
      case 'guild-raids-cleanup':
        console.log("‚öîÔ∏è Nettoyage raids manuel...");
        await this.cleanupExpiredRaids();
        break;
      case 'guild-weekend-events':
        console.log("üéâ √âv√©nements weekend guildes manuel...");
        await this.activateWeekendGuildEvents();
        break;
      // ===== T√ÇCHES DAILY REWARDS =====
      case 'daily-rewards-reset':
        console.log("üéÅ Reset Daily Rewards manuel...");
        const dailyRewardsResult = await DailyRewardsService.performDailyReset();
        console.log(`‚úÖ ${dailyRewardsResult.processed} joueurs trait√©s, ${dailyRewardsResult.errors} erreurs`);
        break;
      case 'daily-rewards-reminder':
        console.log("‚è∞ Rappels Daily Rewards manuel...");
        console.log("üì¨ Rappels Daily Rewards √† impl√©menter (feature future)");
        break;
      // ===== T√ÇCHES BANNI√àRES √âL√âMENTAIRES =====
      case 'elemental-banner-rotation':
        console.log("üîÑ Rotation banni√®res √©l√©mentaires manuelle...");
        await ElementalBannerService.performDailyRotation('S1');
        break;
      case 'elemental-shop-friday':
        console.log("üõí Ouverture boutique √©l√©mentaire manuelle...");
        WebSocketService.broadcastToServer('S1', 'elemental:shop_opened', {
          duration: 24,
          specialOffers: true
        });
        break;
      case 'elemental-friday-boost':
        console.log("üéâ Activation boost vendredi manuel...");
        WebSocketService.broadcastToServer('S1', 'elemental:drop_boost_active', {
          dropRate: 15,
          normalRate: 5,
          multiplier: 3,
          duration: 24
        });
        break;
      case 'elemental-sunday-reminder':
        console.log("üì¢ Rappel dimanche manuel...");
        WebSocketService.broadcastToServer('S1', 'elemental:sunday_reminder', {
          message: "Tomorrow: All elemental banners available!",
          elements: ["Fire", "Water", "Wind", "Electric", "Light", "Shadow"],
          hoursUntil: 6
        });
        break;
      // ===== T√ÇCHES PULLS GRATUITS =====
      case 'free-pulls-auto-reset':
        console.log("üéÅ Reset pulls gratuits manuel...");
        const freePullsResult = await this.processFreePullsReset();
        console.log(`‚úÖ ${freePullsResult.totalReset} resets effectu√©s (Daily: ${freePullsResult.dailyReset}, Weekly: ${freePullsResult.weeklyReset}, Monthly: ${freePullsResult.monthlyReset})`);
        break;
      case 'free-pulls-reminder':
        console.log("‚è∞ Rappels pulls gratuits manuel...");
        const remindersResult = await this.sendFreePullsReminders();
        console.log(`‚úÖ ${remindersResult.remindersSent} rappels envoy√©s`);
        break;
      default:
        throw new Error(`T√¢che inconnue: ${taskName}`);
    }
    
    console.log(`‚úÖ T√¢che ${taskName} ex√©cut√©e manuellement`);
  }

  // Ajouter une t√¢che personnalis√©e
  public static addCustomTask(name: string, cronExpression: string, task: () => Promise<void>) {
    if (this.scheduledTasks.has(name)) {
      console.warn(`‚ö†Ô∏è T√¢che ${name} existe d√©j√† - √©crasement`);
      const existingTask = this.scheduledTasks.get(name);
      if (existingTask) {
        existingTask.stop();
      }
    }

    this.scheduleTask(name, cronExpression, task);
    console.log(`‚ûï T√¢che personnalis√©e ajout√©e: ${name}`);
  }

  // Supprimer une t√¢che sp√©cifique
  public static removeTask(name: string): boolean {
    const task = this.scheduledTasks.get(name);
    if (task) {
      task.stop();
      this.scheduledTasks.delete(name);
      console.log(`üóëÔ∏è T√¢che ${name} supprim√©e`);
      return true;
    }
    console.warn(`‚ö†Ô∏è T√¢che ${name} introuvable`);
    return false;
  }
}
