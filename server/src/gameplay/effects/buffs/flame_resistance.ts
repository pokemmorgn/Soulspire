// server/src/gameplay/effects/buffs/flame_resistance.ts
import { IBattleParticipant } from "../../../models/Battle";
import { BaseEffect, IEffectConfig, EffectResult } from "../base/BaseEffect";

/**
 * Effet Flame Resistance (R√©sistance au Feu)
 * - Augmente la r√©sistance aux d√©g√¢ts de feu
 * - R√©duit la dur√©e des br√ªlures existantes
 * - Immunit√© partielle aux nouvelles br√ªlures
 * - Stackable (jusqu'√† 3 stacks)
 * - Dur√©e : 4 tours (base)
 * - Utilis√© par : RestoringFlameSpell (Pyra)
 */
export class FlameResistanceEffect extends BaseEffect {
  constructor() {
    const config: IEffectConfig = {
      id: "flame_resistance",
      name: "R√©sistance au Feu",
      description: "R√©sistance accrue aux d√©g√¢ts et effets de feu",
      type: "buff",
      category: "stat_modifier",
      stackable: true,
      maxStacks: 3,
      baseDuration: 4
    };
    
    super(config);
  }
  
  onApply(target: IBattleParticipant, appliedBy: IBattleParticipant): EffectResult {
    const resistance = this.getFireResistance(target);
    
    return {
      message: `üî•üõ°Ô∏è ${target.name} d√©veloppe une r√©sistance au feu ! (${resistance}% r√©sistance)`
    };
  }
  
  onTick(target: IBattleParticipant, stacks: number, appliedBy: IBattleParticipant): EffectResult {
    const resistance = this.getFireResistance(target);
    const burnImmunity = this.getBurnImmunityChance(target);
    
    return {
      message: `üî•üõ°Ô∏è ${target.name} r√©siste au feu (${resistance}% r√©sistance, ${burnImmunity}% immunit√© br√ªlure)`,
      statModifiers: {
        fireResistance: resistance,
        burnImmunity: burnImmunity
      }
    };
  }
  
  onRemove(target: IBattleParticipant): EffectResult {
    return {
      message: `üí® La r√©sistance au feu de ${target.name} s'estompe`
    };
  }
  
  canApplyTo(target: IBattleParticipant, appliedBy: IBattleParticipant): boolean {
    return target.status.alive;
  }
  
  /**
   * Obtenir le pourcentage de r√©sistance au feu
   */
  private getFireResistance(target: IBattleParticipant): number {
    const stacks = this.getStacks(target);
    
    // 15% par stack (15%, 30%, 45% max)
    return Math.min(50, stacks * 15);
  }
  
  /**
   * Obtenir la chance d'immunit√© aux br√ªlures
   */
  private getBurnImmunityChance(target: IBattleParticipant): number {
    const stacks = this.getStacks(target);
    
    // 25% par stack (25%, 50%, 75% max)
    return Math.min(80, stacks * 25);
  }
  
  /**
   * Obtenir le nombre de stacks
   */
  private getStacks(target: IBattleParticipant): number {
    const activeEffects = (target as any).activeEffects as any[];
    if (!activeEffects) return 0;
    
    const resistanceEffect = activeEffects.find((effect: any) => effect.id === "flame_resistance");
    if (!resistanceEffect) return 0;
    
    return resistanceEffect.stacks || 1;
  }
  
  /**
   * V√©rifier si une cible a la r√©sistance au feu
   */
  static hasFlameResistance(target: IBattleParticipant): boolean {
    const activeEffects = (target as any).activeEffects as any[];
    if (!activeEffects) return false;
    
    return activeEffects.some((effect: any) => effect.id === "flame_resistance");
  }
  
  /**
   * Obtenir le pourcentage de r√©sistance au feu (m√©thode statique)
   */
  static getFireResistance(target: IBattleParticipant): number {
    const activeEffects = (target as any).activeEffects as any[];
    if (!activeEffects) return 0;
    
    const resistanceEffect = activeEffects.find((effect: any) => effect.id === "flame_resistance");
    if (!resistanceEffect) return 0;
    
    const stacks = resistanceEffect.stacks || 1;
    return Math.min(50, stacks * 15);
  }
  
  /**
   * Obtenir la chance d'immunit√© aux br√ªlures (m√©thode statique)
   */
  static getBurnImmunityChance(target: IBattleParticipant): number {
    const activeEffects = (target as any).activeEffects as any[];
    if (!activeEffects) return 0;
    
    const resistanceEffect = activeEffects.find((effect: any) => effect.id === "flame_resistance");
    if (!resistanceEffect) return 0;
    
    const stacks = resistanceEffect.stacks || 1;
    return Math.min(80, stacks * 25);
  }
  
  /**
   * Appliquer la r√©sistance aux d√©g√¢ts de feu
   * √Ä utiliser dans BattleEngine quand des d√©g√¢ts de feu sont inflig√©s
   */
  static applyFireDamageReduction(target: IBattleParticipant, fireDamage: number): number {
    if (!this.hasFlameResistance(target)) return fireDamage;
    
    const resistance = this.getFireResistance(target);
    const reducedDamage = Math.floor(fireDamage * (1 - resistance / 100));
    
    console.log(`üî•üõ°Ô∏è R√©sistance au Feu r√©duit les d√©g√¢ts de ${target.name} de ${resistance}% (${fireDamage} ‚Üí ${reducedDamage})`);
    
    return Math.max(1, reducedDamage);
  }
  
  /**
   * V√©rifier l'immunit√© aux br√ªlures
   * √Ä utiliser avant d'appliquer une br√ªlure
   */
  static rollBurnImmunity(target: IBattleParticipant): boolean {
    if (!this.hasFlameResistance(target)) return false;
    
    const immunityChance = this.getBurnImmunityChance(target);
    const roll = Math.random() * 100;
    
    const immune = roll < immunityChance;
    
    if (immune) {
      console.log(`üî•üõ°Ô∏è ${target.name} r√©siste √† la br√ªlure (${immunityChance}% chance, roll: ${roll.toFixed(1)})`);
    }
    
    return immune;
  }
  
  /**
   * R√©duire la dur√©e des br√ªlures existantes
   * √Ä appliquer quand Flame Resistance est appliqu√©
   */
  static reduceBurnDuration(target: IBattleParticipant): number {
    const activeEffects = (target as any).activeEffects as any[];
    if (!activeEffects) return 0;
    
    const burnEffect = activeEffects.find((effect: any) => effect.id === "burn");
    if (!burnEffect) return 0;
    
    const originalDuration = burnEffect.duration;
    const reduction = Math.min(2, Math.floor(originalDuration / 2)); // R√©duit de moiti√©, max 2 tours
    
    burnEffect.duration = Math.max(1, burnEffect.duration - reduction);
    
    console.log(`üî•üõ°Ô∏è R√©sistance au Feu r√©duit la br√ªlure de ${target.name} (${originalDuration} ‚Üí ${burnEffect.duration} tours)`);
    
    return reduction;
  }
  
  /**
   * Obtenir les stats compl√®tes de r√©sistance
   */
  static getResistanceStats(target: IBattleParticipant): {
    stacks: number;
    fireResistance: number;
    burnImmunity: number;
    hasResistance: boolean;
  } {
    const activeEffects = (target as any).activeEffects as any[];
    if (!activeEffects) {
      return { stacks: 0, fireResistance: 0, burnImmunity: 0, hasResistance: false };
    }
    
    const resistanceEffect = activeEffects.find((effect: any) => effect.id === "flame_resistance");
    if (!resistanceEffect) {
      return { stacks: 0, fireResistance: 0, burnImmunity: 0, hasResistance: false };
    }
    
    const stacks = resistanceEffect.stacks || 1;
    
    return {
      stacks,
      fireResistance: Math.min(50, stacks * 15),
      burnImmunity: Math.min(80, stacks * 25),
      hasResistance: true
    };
  }
  
  /**
   * Calculer l'efficacit√© contre les d√©g√¢ts √©l√©mentaires
   */
  static calculateElementalEffectiveness(
    target: IBattleParticipant,
    elementType: string,
    baseDamage: number
  ): number {
    if (elementType !== "Fire") return baseDamage;
    
    return this.applyFireDamageReduction(target, baseDamage);
  }
}

// Export de l'instance pour EffectManager
export const flameResistanceEffect = new FlameResistanceEffect();
