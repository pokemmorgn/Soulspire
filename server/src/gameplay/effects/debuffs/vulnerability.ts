// server/src/gameplay/effects/debuffs/vulnerability.ts
import { IBattleParticipant } from "../../../models/Battle";
import { BaseEffect, IEffectConfig, EffectResult } from "../base/BaseEffect";

/**
 * Effet Vulnerability (Vulnérabilité)
 * - Augmente les dégâts reçus de 25% (non stackable)
 * - Durée courte (2 tours)
 * - Affecte TOUS les types de dégâts reçus
 * - Très puissant pour setup un burst
 */
export class VulnerabilityEffect extends BaseEffect {
  constructor() {
    const config: IEffectConfig = {
      id: "vulnerability",
      name: "Vulnérabilité",
      description: "La cible prend plus de dégâts",
      type: "debuff",
      category: "stat_modifier",
      stackable: false, // Trop puissant pour stack
      maxStacks: 1,
      baseDuration: 2
    };
    
    super(config);
  }
  
  onApply(target: IBattleParticipant, appliedBy: IBattleParticipant): EffectResult {
    return {
      message: `🎯 ${target.name} devient vulnérable !`
    };
  }
  
  onTick(target: IBattleParticipant, stacks: number, appliedBy: IBattleParticipant): EffectResult {
    // Vulnerability n'a pas d'effet par tour (pas de dégâts)
    // L'effet est appliqué lors du calcul des dégâts dans BattleEngine
    
    return {
      message: `🎯 ${target.name} est vulnérable (+25% dégâts reçus)`,
      statModifiers: {
        damageReceived: 25
      }
    };
  }
  
  onRemove(target: IBattleParticipant): EffectResult {
    return {
      message: `🛡️ ${target.name} n'est plus vulnérable`
    };
  }
  
  // Vérifier si la cible peut devenir vulnérable
  canApplyTo(target: IBattleParticipant, appliedBy: IBattleParticipant): boolean {
    // Immunité générale
    if (target.status.buffs.includes("immunity")) {
      console.log(`🛡️ ${target.name} est immunisé aux debuffs`);
      return false;
    }
    
    // Immunité spécifique (fortify, protection = résiste à la vulnérabilité)
    if (target.status.buffs.includes("fortify") || target.status.buffs.includes("protection")) {
      console.log(`🛡️ ${target.name} résiste à la vulnérabilité (Fortify active)`);
      return false;
    }
    
    // Les Tanks ont 20% de résistance (protecteurs naturels)
    if (target.role === "Tank") {
      const resistanceChance = 0.2; // 20%
      if (Math.random() < resistanceChance) {
        console.log(`🛡️ ${target.name} résiste à la vulnérabilité (Tank resistance)`);
        return false;
      }
    }
    
    return true;
  }
  
  /**
   * Vérifier si une cible est vulnérable
   * @param target - Cible à vérifier
   * @returns true si vulnérable
   */
  static isVulnerable(target: IBattleParticipant): boolean {
    const activeEffects = (target as any).activeEffects as any[];
    if (!activeEffects) return false;
    
    return activeEffects.some((effect: any) => effect.id === "vulnerability");
  }
  
  /**
   * Obtenir le multiplicateur de dégâts pour une cible vulnérable
   * @param target - Cible à vérifier
   * @returns Multiplicateur (1.0 si pas vulnérable, 1.25 si vulnérable)
   */
  static getDamageMultiplier(target: IBattleParticipant): number {
    return this.isVulnerable(target) ? 1.25 : 1.0;
  }
  
  /**
   * Appliquer le multiplicateur de vulnérabilité aux dégâts
   * @param target - Cible qui reçoit les dégâts
   * @param baseDamage - Dégâts de base
   * @returns Dégâts après multiplicateur
   */
  static applyVulnerability(target: IBattleParticipant, baseDamage: number): number {
    if (!this.isVulnerable(target)) return baseDamage;
    
    const increasedDamage = Math.floor(baseDamage * 1.25);
    console.log(`🎯 Vulnérabilité augmente les dégâts de ${target.name} (+25%)`);
    
    return increasedDamage;
  }
}

// Export de l'instance pour EffectManager
export const vulnerabilityEffect = new VulnerabilityEffect();
