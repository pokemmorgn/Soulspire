// server/src/gameplay/ultimates/VolcanicEruptionSpell.ts
import { BaseSpell, ISpellConfig } from "../base/BaseSpell";
import { IBattleParticipant, IBattleAction } from "../../models/Battle";
import { EffectManager } from "../EffectManager";

/**
 * √âruption Primordiale - Rhyzann (L√©gendaire Tank Offensif)
 * 
 * Description originale :
 * "Rhyzann enfonce ses bras dans le sol et invoque la col√®re du volcan ancestral.
 * Pendant 5 secondes, des geysers de feu jaillissent autour de lui √† intervalles r√©guliers,
 * infligeant d'√©normes d√©g√¢ts de feu √† tous les ennemis proches.
 * Chaque ennemi touch√© soigne Rhyzann de 3% de ses PV max.
 * Pendant toute la dur√©e, il est insensible aux contr√¥les et subit 25% de d√©g√¢ts en moins."
 * 
 * Adaptation turn-based :
 * - Dur√©e : 5 secondes ‚Üí 5 tours
 * - Geysers : D√©g√¢ts AoE chaque tour pendant la dur√©e
 * - Soins : 3% PV max par ennemi touch√© √† chaque activation
 * - Immunit√© contr√¥les + r√©duction d√©g√¢ts 25%
 * - Recharge : 25 tours
 * - Co√ªt : 100 √©nergie
 */
class VolcanicEruptionSpell extends BaseSpell {
  constructor() {
    const config: ISpellConfig = {
      id: "volcanic_eruption",
      name: "√âruption Primordiale",
      description: "Zone de danger continue : d√©g√¢ts AoE r√©currents + immunit√© + soins",
      type: "ultimate",
      category: "utility",
      targetType: "self",
      
      energyCost: 100,
      baseCooldown: 25,
      
      maxLevel: 10,
      scalingType: "linear",
      
      element: "Fire",
      requiresRole: ["Tank"],
      
      animationType: "volcanic_eruption_field",
      soundEffect: "volcanic_eruption_cast"
    };
    
    super(config);
  }
  
  execute(
    caster: IBattleParticipant,
    targets: IBattleParticipant[],
    spellLevel: number,
    battleContext?: any
  ): IBattleAction {
    const turn = battleContext?.currentTurn || 1;
    const action = this.createBaseAction(caster, [caster], "ultimate", turn);
    
    // Co√ªt en √©nergie
    action.energyCost = 100;
    action.energyGain = 0; // Ultimate ne g√©n√®re pas d'√©nergie
    action.buffsApplied = [];
    action.debuffsApplied = [];
    action.healing = 0;
    action.damage = 0;
    
    // Appliquer l'effet √âruption Primordiale
    const duration = this.getEffectDuration(spellLevel);
    const eruptionResult = EffectManager.applyEffect(
      "volcanic_eruption",
      caster,
      caster,
      duration
    );
    
    if (eruptionResult && eruptionResult.message) {
      console.log(`üåã ${eruptionResult.message}`);
      action.buffsApplied.push("volcanic_eruption");
    }
    
    // Configurer les m√©tadonn√©es de l'effet
    const activeEffect = (caster as any).activeEffects?.find(
      (e: any) => e.id === "volcanic_eruption"
    );
    
    if (activeEffect) {
      activeEffect.metadata = {
        geyserDamage: this.getGeyserDamage(caster, spellLevel),
        healingPerEnemy: this.getHealingPerEnemy(caster, spellLevel),
        damageReduction: this.getDamageReduction(spellLevel),
        ccImmunity: true,
        isVolcanicEruption: true,
        turnsActive: 0 // Compteur pour les activations
      };
    }
    
    // Ajouter les buffs au status pour compatibilit√©
    if (!caster.status.buffs.includes("volcanic_eruption")) {
      caster.status.buffs.push("volcanic_eruption");
    }
    
    // Ajouter immunit√© contr√¥les
    if (!caster.status.buffs.includes("cc_immunity")) {
      caster.status.buffs.push("cc_immunity");
      action.buffsApplied.push("cc_immunity");
    }
    
    console.log(`üåã ${caster.name} d√©clenche √âruption Primordiale ! Zone volcanique pendant ${duration} tours`);
    console.log(`üåãüõ°Ô∏è Immunit√© contr√¥les + ${this.getDamageReduction(spellLevel)}% r√©duction d√©g√¢ts`);
    
    return action;
  }
  
  // ----- M√©thodes statiques pour int√©gration BattleEngine -----
  
  /**
   * V√©rifier si un participant est sous l'effet √âruption Primordiale
   */
  static isErupting(participant: IBattleParticipant): boolean {
    if (!participant.status.alive) return false;
    
    const activeEffect = (participant as any).activeEffects?.find(
      (e: any) => e.id === "volcanic_eruption"
    );
    
    return activeEffect !== undefined;
  }
  
  /**
   * Obtenir la r√©duction de d√©g√¢ts
   */
  static getDamageReduction(participant: IBattleParticipant): number {
    if (!this.isErupting(participant)) return 0;
    
    const activeEffect = (participant as any).activeEffects?.find(
      (e: any) => e.id === "volcanic_eruption"
    );
    
    return activeEffect?.metadata?.damageReduction || 25;
  }
  
  /**
   * Appliquer la r√©duction de d√©g√¢ts de l'√©ruption
   */
  static applyVolcanicProtection(
    defender: IBattleParticipant, 
    incomingDamage: number
  ): number {
    if (!this.isErupting(defender) || incomingDamage <= 0) return incomingDamage;
    
    const reductionPercent = this.getDamageReduction(defender);
    const reducedDamage = Math.floor(incomingDamage * (1 - reductionPercent / 100));
    
    console.log(`üåãüõ°Ô∏è √âruption Primordiale: -${reductionPercent}% d√©g√¢ts (${incomingDamage} ‚Üí ${reducedDamage})`);
    
    return Math.max(1, reducedDamage);
  }
  
  /**
   * D√©clencher les geysers de feu (√† appeler chaque tour)
   */
  static triggerGeyserTick(
    caster: IBattleParticipant,
    allEnemies: IBattleParticipant[]
  ): { damage: number; healing: number } {
    const activeEffect = (caster as any).activeEffects?.find(
      (e: any) => e.id === "volcanic_eruption"
    );
    
    if (!activeEffect || !activeEffect.metadata) {
      return { damage: 0, healing: 0 };
    }
    
    // Incr√©menter le compteur
    activeEffect.metadata.turnsActive = (activeEffect.metadata.turnsActive || 0) + 1;
    
    const geyserDamage = activeEffect.metadata.geyserDamage || 0;
    const healingPerEnemy = activeEffect.metadata.healingPerEnemy || 0;
    const aliveEnemies = allEnemies.filter(enemy => enemy.status.alive);
    
    let totalDamage = 0;
    let totalHealing = 0;
    
    console.log(`üåãüí• Geysers de feu ! Tour ${activeEffect.metadata.turnsActive}`);
    
    // D√©g√¢ts AoE aux ennemis
    for (const enemy of aliveEnemies) {
      // Calculer d√©g√¢ts avec d√©fense r√©duite (geysers = magie de terre)
      const defense = Math.floor(enemy.stats.def * 0.7); // Bypass partiel d√©fense
      let finalDamage = Math.max(1, geyserDamage - Math.floor(defense / 2));
      
      // Avantage √©l√©mentaire
      const elementalBonus = caster.element === "Fire" && enemy.element === "Wind" ? 1.3 : 1.0;
      finalDamage = Math.floor(finalDamage * elementalBonus);
      
      // Variation al√©atoire r√©duite (geysers = r√©guliers)
      finalDamage = Math.floor(finalDamage * (0.95 + Math.random() * 0.1));
      
      enemy.currentHp = Math.max(0, enemy.currentHp - finalDamage);
      totalDamage += finalDamage;
      
      console.log(`üåãüî• ${enemy.name} subit ${finalDamage} d√©g√¢ts de geyser`);
      
      if (enemy.currentHp === 0) {
        enemy.status.alive = false;
        console.log(`üíÄ ${enemy.name} est consum√© par l'√©ruption !`);
      }
    }
    
    // Soins pour Rhyzann (3% PV max par ennemi touch√©)
    if (aliveEnemies.length > 0) {
      const totalHealingAmount = healingPerEnemy * aliveEnemies.length;
      caster.currentHp = Math.min(
        caster.stats.maxHp, 
        caster.currentHp + totalHealingAmount
      );
      totalHealing = totalHealingAmount;
      
      console.log(`üåãüíö ${caster.name} se soigne de ${totalHealingAmount} HP (${aliveEnemies.length} ennemis √ó ${healingPerEnemy} HP)`);
    }
    
    return { damage: totalDamage, healing: totalHealing };
  }
  
  /**
   * V√©rifier l'immunit√© aux contr√¥les
   */
  static hasControlImmunity(participant: IBattleParticipant): boolean {
    return this.isErupting(participant);
  }
  
  // ----- D√©tails de calcul -----
  
  /**
   * Dur√©e de l'effet
   * 5 secondes ‚Üí 5 tours
   */
  private getEffectDuration(spellLevel: number): number {
    // Base 5 tours, +1 tous les 5 niveaux
    return Math.min(7, 5 + Math.floor((spellLevel - 1) / 5));
  }
  
  /**
   * D√©g√¢ts des geysers par activation
   * "√ânormes d√©g√¢ts de feu"
   */
  private getGeyserDamage(caster: IBattleParticipant, spellLevel: number): number {
    // D√©g√¢ts √©normes mais r√©partis : niveau 1: 200 ‚Üí niveau 10: 450
    const baseDamage = Math.floor(200 + (spellLevel - 1) * 28);
    
    // Bonus selon ATK du caster
    const atkBonus = Math.floor(caster.stats.atk * 0.9);
    
    return baseDamage + atkBonus;
  }
  
  /**
   * Soins par ennemi touch√©
   * 3% PV max par ennemi
   */
  private getHealingPerEnemy(caster: IBattleParticipant, spellLevel: number): number {
    // 3% base, +0.5% par niveau (max 7.5% au niveau 10)
    const percent = Math.min(8, 3 + (spellLevel - 1) * 0.5);
    return Math.floor(caster.stats.maxHp * (percent / 100));
  }
  
  /**
   * R√©duction de d√©g√¢ts pendant l'effet
   */
  private getDamageReduction(spellLevel: number): number {
    // 25% base, +2% par niveau (max 43% au niveau 10)
    return Math.min(45, 25 + (spellLevel - 1) * 2);
  }
  
  /**
   * V√©rifications suppl√©mentaires
   */
  protected additionalCanCastChecks(caster: IBattleParticipant, spellLevel: number): boolean {
    // Ne peut pas √™tre lanc√© sous silence
    if (caster.status.debuffs.includes("silenced")) {
      return false;
    }
    
    // Ne peut pas se cumuler avec une autre √âruption Primordiale
    if (VolcanicEruptionSpell.isErupting(caster)) {
      console.log(`‚ö†Ô∏è ${caster.name} a d√©j√† une √âruption Primordiale active`);
      return false;
    }
    
    // V√©rifier √©nergie
    if (caster.energy < 100) {
      console.log(`‚ö†Ô∏è ${caster.name} n'a pas assez d'√©nergie pour √âruption Primordiale (${caster.energy}/100)`);
      return false;
    }
    
    return true;
  }
}

// Exports
export const volcanicEruptionSpell = new VolcanicEruptionSpell();
export { VolcanicEruptionSpell };
